#BlueJ class context
comment0.target=Iceepeecee
comment0.text=\r\n\ The\ Iceepeecee\ class\ represents\ an\ environment\ for\ managing\ islands,\ flights,\ and\ photographs.\r\n\ It\ allows\ users\ to\ add,\ delete,\ and\ interact\ with\ these\ elements\ within\ a\ graphical\ canvas.\r\n\ \r\n\ @author\ Ana\ Mar\u00EDa\ Dur\u00E1n\ And\ Laura\ Natalia\ Rojas\r\n\ @version\ 23/03/23\r\n
comment1.params=length\ width
comment1.target=Iceepeecee(int,\ int)
comment1.text=\r\n\ Constructs\ an\ Iceepeecee\ object\ with\ the\ specified\ canvas\ dimensions.\r\n\ \r\n\ @param\ length\ The\ length\ of\ the\ canvas\ (must\ be\ positive).\r\n\ @param\ width\ \ The\ width\ of\ the\ canvas\ (must\ be\ positive).\r\n
comment10.params=color
comment10.target=Flight\ getFlight(java.lang.String)
comment10.text=\r\n\ Retrieves\ the\ flight\ object\ associated\ with\ the\ specified\ color.\r\n\r\n\ @param\ color\ The\ color\ identifier\ of\ the\ flight.\r\n\ @return\ The\ Flight\ object\ corresponding\ to\ the\ provided\ color,\ or\ null\ if\ not\ found.\r\n
comment11.params=color
comment11.target=void\ deleteIsland(java.lang.String)
comment11.text=\r\n\ Delete\ an\ island\ from\ Iceepeecee.\r\n\ \u2570(\u25E3\uFE4F\u25E2)\u256F\r\n\ @param\ color\ The\ color\ of\ the\ island\ to\ delete.\r\n
comment12.params=color
comment12.target=void\ makeIslandVisible(java.lang.String)
comment12.text=\r\n\ Make\ the\ island\ with\ the\ specified\ color\ visible.\r\n\ \r\n\ @param\ color\ The\ color\ of\ the\ island\ to\ make\ visible.\r\n
comment13.params=color
comment13.target=void\ makeIslandInvisible(java.lang.String)
comment13.text=\r\n\ Make\ the\ island\ with\ the\ specified\ color\ invisible.\r\n\ \r\n\ @param\ color\ The\ color\ of\ the\ island\ to\ make\ invisible.\r\n
comment14.params=island
comment14.target=int[][]\ islandLocation(java.lang.String)
comment14.text=\r\n\ Get\ the\ location\ of\ an\ island\ by\ color.\r\n\ \r\n\ @param\ island\ The\ color\ of\ the\ island\ to\ query.\r\n\ @return\ An\ array\ of\ coordinates\ representing\ the\ location\ of\ the\ island,\ or\ null\ if\ not\ found.\r\n
comment15.params=color\ from\ to
comment15.target=void\ addFlight(java.lang.String,\ int[],\ int[])
comment15.text=\r\n\ Add\ a\ flight\ to\ Iceepeecee.\r\n\ Do\ not\ repeat\ the\ color\ pls(\ \u2022\u3145\u2022)\r\n\ \ -----\r\n\ \ Valid\ colors\ are\:\ \r\n\ \ "red",\ "green",\ "blue",\ "yellow",\ "purple",\ "cyan",\ "pink",\ "orange",\ \r\n\ \ "brown",\ "gray",\ "magenta",\ "white",\ "lightBlue",\ "lime",\ "gold",\ "teal",\ "violet",\ "coral",\ "lavender",\ \r\n\ \ "olive",\ "maroon",\ "turquoise",\ "navyBlue",\ "bistre",\ "burgundy",\ "crimson",\ "lightCyan",\ "cobalt",\ \r\n\ \ "fuchsia",\ "garnet",\ "lightGray",\ "darkGray",\ "indigo",\ "lightLilac",\ "lightLime",\ "lightMagenta",\ \r\n\ \ "lightBrown",\ "darkBrown",\ "lightOrange",\ "darkOrange",\ "lightGold",\ "darkGold",\ "silver",\ "lightPink",\ \r\n\ \ "darkPink",\ "darkTurquoise",\ "lightGreen",\ "darkGreen",\ "lightViolet",\ "darkViolet"\r\n\ \ ----\r\n\ @param\ color\ The\ color\ of\ the\ flight.\r\n\ @param\ from\ \ The\ starting\ coordinates\ [x1,\ y1,\ z1].\r\n\ @param\ to\ \ \ \ The\ ending\ coordinates\ [x2,\ y2,\ z2].\r\n
comment16.params=from\ to
comment16.target=java.lang.String\ findFlightWithSamePoints(int[],\ int[])
comment17.params=type\ color\ from\ to
comment17.target=void\ addFlight(java.lang.String,\ java.lang.String,\ int[],\ int[])
comment18.params=type\ color\ from\ to
comment18.target=Flight\ createFlightByType(java.lang.String,\ java.lang.String,\ int[],\ int[])
comment19.params=color
comment19.target=void\ deleteFlight(java.lang.String)
comment19.text=\r\n\ Delete\ a\ flight\ from\ Iceepeecee.\r\n\ \u2570(\u25E3\uFE4F\u25E2)\u256F\ \r\n\ @param\ color\ The\ color\ of\ the\ flight\ to\ delete.\r\n
comment2.params=islands\ flights
comment2.target=Iceepeecee(int[][][],\ int[][][])
comment2.text=\r\n\ Constructs\ an\ instance\ of\ the\ Iceepeecee\ simulator\ with\ specified\ islands\ and\ flights\ data.\r\n\r\n\ @param\ islands\ An\ array\ representing\ the\ islands\ with\ their\ three-dimensional\ coordinates.\r\n\ @param\ flights\ An\ array\ representing\ the\ flights\ with\ coordinates\ of\ starting\ and\ ending\ points.\r\n\ @throws\ IceepeeceeException\ If\ an\ exception\ related\ to\ Iceepeecee\ operations\ occurs\ during\ initialization.\r\n
comment20.params=flight
comment20.target=int[][]\ flightLocation(java.lang.String)
comment20.text=\r\n\ Get\ the\ location\ of\ a\ flight\ by\ color.\r\n\ \r\n\ @param\ flight\ The\ color\ of\ the\ flight\ to\ query.\r\n\ @return\ A\ string\ representing\ the\ location\ of\ the\ flight.\r\n
comment21.params=color
comment21.target=void\ makeFlightVisible(java.lang.String)
comment21.text=\r\n\ Make\ the\ flight\ visible\ by\ its\ color.\r\n\ \r\n\ @param\ color\ The\ color\ of\ the\ flight\ to\ make\ visible.\r\n
comment22.params=color
comment22.target=void\ makeFlightInvisible(java.lang.String)
comment22.text=\r\n\ Make\ the\ flight\ invisible\ by\ its\ color.\r\n\ \r\n\ @param\ color\ The\ color\ of\ the\ flight\ to\ make\ invisible.\r\n
comment23.params=flightColor\ theta
comment23.target=void\ photograph(java.lang.String,\ double)
comment23.text=\r\n\ Capture\ a\ photograph\ from\ a\ specific\ flight\ at\ the\ given\ angle\ (theta).\r\n\ \r\n\ @param\ flightColor\ The\ color\ of\ the\ flight\ to\ capture\ a\ photograph\ from.\r\n\ @param\ theta\ \ \ \ \ \ \ The\ angle\ (in\ radians)\ at\ which\ the\ photograph\ is\ taken.\r\n
comment24.params=theta
comment24.target=void\ photograph(double)
comment24.text=\r\n\ Capture\ photographs\ from\ all\ flights\ in\ Iceepeecee\ at\ the\ given\ angle\ (theta).\r\n\ \r\n\ @param\ theta\ The\ angle\ (in\ radians)\ at\ which\ the\ photographs\ are\ taken.\r\n
comment25.params=
comment25.target=void\ makeVisible()
comment25.text=\r\n\ Makes\ flights,\ islands,\ and\ photographs\ visible\ within\ the\ Iceepeecee\ simulation.\r\n\ If\ any\ operation\ is\ successful\ during\ the\ process,\ it\ sets\ the\ operationSuccess\ flag\ to\ true.\r\n
comment26.params=
comment26.target=void\ makeInvisible()
comment26.text=\r\n\ Makes\ flights,\ islands,\ and\ photographs\ invisible\ within\ the\ Iceepeecee\ simulation.\r\n\ If\ any\ operation\ is\ successful\ during\ the\ process,\ it\ sets\ the\ operationSuccess\ flag\ to\ true.\r\n
comment27.params=color
comment27.target=double\ flightCamera(java.lang.String)
comment27.text=\r\n\ Retrieves\ the\ angle\ (theta)\ in\ degrees\ of\ the\ most\ recent\ photograph\ taken\ by\ a\ specific\ flight\ of\ the\ given\ color.\r\n\r\n\ @param\ color\ The\ color\ of\ the\ flight\ for\ which\ the\ photograph\ angle\ is\ requested.\r\n\ @return\ The\ angle\ in\ degrees\ (theta)\ of\ the\ most\ recent\ photograph\ taken\ by\ the\ flight.\ If\ no\ photographs\ exist\ or\ the\ flight\ is\ not\ found,\ it\ returns\ 0.0.\r\n
comment28.params=
comment28.target=java.lang.String[]\ islands()
comment28.text=\r\n\ Retrieves\ information\ about\ all\ the\ islands\ stored\ in\ Iceepeecee.\r\n\r\n\ @return\ An\ array\ of\ strings\ representing\ the\ colors\ of\ all\ stored\ islands.\r\n
comment29.params=
comment29.target=java.lang.String[]\ flights()
comment29.text=\r\n\ Retrieves\ information\ about\ all\ the\ flights\ stored\ in\ Iceepeecee.\r\n\r\n\ @return\ An\ array\ of\ strings\ representing\ the\ colors\ of\ all\ stored\ flights.\r\n
comment3.params=color\ vertexArray
comment3.target=void\ addIsland(java.lang.String,\ int[][])
comment3.text=\r\n\ Add\ an\ island\ to\ Iceepeecee.\r\n\ Do\ not\ repeat\ the\ color\ pls(\ \u2022\u3145\u2022)\r\n\ -----\r\n\ \ Valid\ colors\ are\:\ \r\n\ \ "red",\ "green",\ "blue",\ "yellow",\ "purple",\ "cyan",\ "pink",\ "orange",\ \r\n\ \ "brown",\ "gray",\ "magenta",\ "white",\ "lightBlue",\ "lime",\ "gold",\ "teal",\ "violet",\ "coral",\ "lavender",\ \r\n\ \ "olive",\ "maroon",\ "turquoise",\ "navyBlue",\ "bistre",\ "burgundy",\ "crimson",\ "lightCyan",\ "cobalt",\ \r\n\ \ "fuchsia",\ "garnet",\ "lightGray",\ "darkGray",\ "indigo",\ "lightLilac",\ "lightLime",\ "lightMagenta",\ \r\n\ \ "lightBrown",\ "darkBrown",\ "lightOrange",\ "darkOrange",\ "lightGold",\ "darkGold",\ "silver",\ "lightPink",\ \r\n\ \ "darkPink",\ "darkTurquoise",\ "lightGreen",\ "darkGreen",\ "lightViolet",\ "darkViolet"\r\n\ \ ----\r\n\ @param\ color\ \ \ \ \ \ \ The\ color\ of\ the\ island.\r\n\ @param\ vertexArray\ The\ vertices\ of\ the\ island.\r\n
comment30.params=vertexArray
comment30.target=boolean\ isWithinCanvasBounds(int[][])
comment30.text=\r\n\ Checks\ if\ the\ island's\ vertices\ are\ within\ the\ canvas\ boundaries.\r\n\r\n\ @param\ vertexArray\ The\ vertices\ of\ the\ island.\r\n\ @return\ true\ if\ the\ vertices\ are\ within\ the\ canvas\ boundaries,\ false\ otherwise.\r\n
comment31.params=coordinates
comment31.target=boolean\ isWithinCanvasBounds(int[])
comment31.text=\r\n\ Checks\ if\ a\ set\ of\ coordinates\ is\ within\ the\ canvas\ boundaries.\r\n\r\n\ @param\ coordinates\ The\ coordinates\ to\ verify\ [x,\ y,\ z].\r\n\ @return\ true\ if\ the\ coordinates\ are\ within\ the\ canvas,\ false\ otherwise.\r\n
comment32.params=contenedor
comment32.target=java.lang.String\ getColorForIndex(java.util.HashMap)
comment32.text=\r\n\ Retrieves\ a\ color\ based\ on\ the\ provided\ index.\r\n\r\n\ @param\ index\ The\ index\ used\ to\ select\ a\ color.\r\n\ @return\ The\ color\ corresponding\ to\ the\ given\ index\ or\ "black"\ if\ the\ index\ is\ out\ of\ range.\r\n
comment33.params=message
comment33.target=void\ showInfoMessage(java.lang.String)
comment33.text=\r\n\ Displays\ an\ information\ message\ in\ a\ dialog\ window.\r\n\r\n\ @param\ message\ The\ informative\ message\ to\ display.\r\n
comment34.params=message
comment34.target=void\ showErrorMessage(java.lang.String)
comment34.text=\r\n\ Displays\ an\ error\ message\ in\ a\ dialog\ window.\r\n\r\n\ @param\ message\ The\ error\ message\ to\ display.\r\n
comment35.params=
comment35.target=void\ ok()
comment35.text=\r\n\ Checks\ if\ the\ last\ operation\ in\ the\ simulation\ was\ successful.\r\n
comment36.params=
comment36.target=boolean\ isOperationSuccess()
comment36.text=\r\n\ Checks\ if\ the\ last\ operation\ in\ the\ simulation\ was\ successful.\r\n\r\n\ @return\ true\ if\ the\ last\ operation\ was\ successful,\ false\ otherwise.\r\n
comment37.params=
comment37.target=void\ finish()
comment37.text=\r\n\ Finishes\ the\ simulation\ and\ closes\ the\ graphic\ canvas.\r\n
comment38.params=islandColor
comment38.target=int[][]\ getIslandVertices(java.lang.String)
comment38.text=\r\n\ Retrieves\ the\ vertices\ of\ an\ island\ given\ its\ color.\r\n\r\n\ @param\ islandColor\ The\ color\ of\ the\ island.\r\n\ @return\ The\ array\ of\ vertices\ for\ the\ specified\ island,\ or\ null\ if\ the\ island\ is\ not\ found.\r\n
comment39.params=
comment39.target=java.lang.String[]\ observedIslands()
comment39.text=\r\n\ Retrieves\ the\ colors\ of\ islands\ that\ have\ been\ observed\ by\ one\ or\ more\ flight\ photographs.\r\n\r\n\ @return\ An\ array\ of\ strings\ representing\ the\ colors\ of\ observed\ islands.\r\n
comment4.params=
comment4.target=java.lang.String\ getUnusedColor()
comment40.params=
comment40.target=java.lang.String[]\ uselessFlights()
comment40.text=\r\n\ Retrieves\ the\ colors\ of\ flights\ that\ did\ not\ capture\ any\ information\ about\ the\ islands.\r\n\r\n\ @return\ An\ array\ of\ strings\ representing\ the\ colors\ of\ useless\ flights.\r\n
comment41.params=vertices
comment41.target=java.util.List\ convertToPoints(int[][])
comment41.text=\r\n\ Converts\ an\ array\ of\ vertices\ to\ a\ list\ of\ points.\r\n\ \r\n\ @param\ vertices\ The\ vertex\ matrix.\r\n\ @return\ A\ list\ of\ points.\r\n
comment42.params=innerPolygon\ outerPolygon
comment42.target=boolean\ isPolygonInsidePolygon(java.util.List,\ java.util.List)
comment42.text=\r\n\ Checks\ if\ a\ polygon\ is\ completely\ contained\ within\ another\ polygon.\r\n\ \r\n\ @param\ innerPolygon\ The\ vertices\ of\ the\ internal\ polygon.\r\n\ @param\ outerPolygon\ The\ vertices\ of\ the\ external\ polygon.\r\n\ @return\ true\ if\ the\ inner\ polygon\ is\ completely\ contained\ in\ the\ outer\ one,\ false\ otherwise.\r\n
comment43.params=point\ vertices
comment43.target=boolean\ isPointInsidePolygon(Point,\ java.util.List)
comment43.text=\r\n\ Checks\ if\ a\ given\ point\ is\ inside\ a\ polygon\ represented\ by\ a\ list\ of\ vertices.\r\n\r\n\ @param\ point\ \ \ \ \ The\ point\ to\ be\ checked\ as\ a\ Point\ object.\r\n\ @param\ vertices\ \ The\ list\ of\ vertices\ of\ the\ polygon.\r\n\ @return\ true\ if\ the\ point\ is\ inside\ the\ polygon,\ false\ otherwise.\r\n
comment44.params=
comment44.target=getAllIslandVertices()
comment44.text=\r\n\ Retrieves\ a\ list\ of\ all\ the\ vertices\ of\ the\ islands\ in\ Iceepeecee.\r\n\r\n\ @return\ A\ list\ of\ arrays\ of\ island\ vertices.\r\n
comment5.params=vertexArray
comment5.target=java.lang.String\ findIslandWithSameVertices(int[][])
comment6.params=type\ color\ vertexArray
comment6.target=void\ addIsland(java.lang.String,\ java.lang.String,\ int[][])
comment7.params=type\ color\ vertexArray
comment7.target=Island\ createIsland(java.lang.String,\ java.lang.String,\ int[][])
comment8.params=color
comment8.target=Island\ getIsland(java.lang.String)
comment8.text=\r\n\ Get\ an\ island\ by\ its\ color.\r\n\ \r\n\ @param\ color\ The\ color\ of\ the\ island\ to\ retrieve.\r\n\ @return\ The\ Island\ object\ with\ the\ specified\ color,\ or\ null\ if\ not\ found.\r\n
comment9.params=
comment9.target=java.util.HashMap\ getIslands()
numComments=45
